services:
  # -------------------------------
  # Banco central compartilhado
  # -------------------------------
  apolice-db:
    image: postgres:16-alpine
    container_name: apolice-db
    environment:
      POSTGRES_DB: apolice
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: America/Sao_Paulo
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d apolice"]
      interval: 5s
      retries: 5
      timeout: 5s

  # -------------------------------
  # Aplicação de apólices
  # -------------------------------
  apolice-app:
    build:
      dockerfile: Dockerfile
    container_name: apolice-app
    ports:
      - "8080:8080"
    depends_on:
      apolice-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: developer
      SPRING_DATASOURCE_URL: jdbc:postgresql://apolice-db:5432/apolice
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAVA_TOOL_OPTIONS: "-Duser.timezone=America/Sao_Paulo"
      TZ: America/Sao_Paulo
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 60s
      retries: 5
      timeout: 60s

  # -------------------------------
  # API de Fraudes
  # -------------------------------
  fraude-app:
    image: migprogrammer/fraude-api:1.4
    container_name: fraude-app
    ports:
      - "9090:9090"
    depends_on:
      apolice-db:
        condition: service_healthy
      apolice-app:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: developer
      SPRING_DATASOURCE_URL: jdbc:postgresql://apolice-db:5432/apolice
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      JAVA_TOOL_OPTIONS: "-Duser.timezone=America/Sao_Paulo"
      TZ: America/Sao_Paulo

  # -------------------------------
  # Admin web do PostgreSQL
  # -------------------------------
  pg-admin-web:
    image: sosedoff/pgweb
    container_name: pgweb
    environment:
      PGWEB_DATABASE_URL: postgres://postgres:postgres@apolice-db:5432/apolice?sslmode=disable
      PGWEB_WAIT_FOR_DB: 10s
    ports:
      - "8081:8081"
    depends_on:
      - apolice-db

  # -------------------------------
  # Zookeeper
  # -------------------------------
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "/opt/bitnami/scripts/zookeeper/healthcheck.sh" ]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 10s

  # -------------------------------
  # Kafka simplificado
  # -------------------------------
  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 30000
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 30000
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      retries: 5
      timeout: 10s

  # -------------------------------
  # Kafdrop
  # -------------------------------
  kafdrop:
    image: obsidiandynamics/kafdrop:4.1.0
    container_name: kafdrop
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: -Xms32M -Xmx64M
    ports:
      - "9000:9000"
    depends_on:
      - kafka
    restart: unless-stopped

volumes:
  pgdata:
